<?php
/**
 * Twenty'em WordPress Framework.
 *
 * WARNING: This file is part of Twenty'em WordPress Framework.
 * DO NOT edit this file under any circumstances. Do all your modifications in the form of a child theme.
 *
 * @package			WordPress
 * @subpackage		Twenty'em
 * @author			RogerTM
 * @license			license.txt
 * @link			http://twenty-em.com/
 * @since 			Twenty'em 1.0
 */

/**
 * Twenty'em Helpers Functions.
 */

/**
 * Helper. LESS files compiler
 * @uses less.php
 * @link https://github.com/oyejorge/less.php
 *
 * @param array $less_files Required. array( $key => $value ). Where $key is the path to the file to
 * 									  compile and $value the url of the file.
 * @param array $options Optional. Array of options.
 * @param array $modify_vars Optional. Array of modified vars.
 * @param bool $delete_garbage Optional. Delete all the garbage generated by less.php. Default True
 *
 * @return string Name of the compiled file or Error on fail.
 *
 * @since Twenty'em 1.0
 */
function t_em_lessphp_compiler( $less_files, $options = array(), $modify_vars = array(), $delete_garbage = true ){
	require_once T_EM_THEME_DIR_INC_PATH . '/less-php/Autoloader.php';
	Less_Autoloader::register();

	$dir		= '/cache/';
	$parent_dir	= T_EM_THEME_DIR_CSS_PATH;
	$dir_path	= T_EM_THEME_DIR_CSS_PATH . $dir;
	$dir_url	= T_EM_THEME_DIR_CSS_URL . $dir;

	if ( ! is_writable( $parent_dir ) && ! file_exists( $dir_path ) ) :
		$error = sprintf( __( '%s could not create the css files cache directory in <strong><code>%s</code></strong>. Make this directory writable before continue.<br />
							   See the Codex for more information about <a href="%s">Changing File Permissions</a>.', 't_em' ),
								T_EM_FRAMEWORK_NAME,
								$parent_dir,
								'https://codex.wordpress.org/Changing_File_Permissions' );
		wp_die( $error );
	endif;

	if ( ! file_exists( $dir_path ) ) :
		mkdir( $dir_path );
		copy( $parent_dir .'/index.php', $dir_path .'index.php' );
	endif;
	$cache_dir = $dir_path;

	$cache_options = array(
		'cache_dir'	=> $cache_dir,
	);
	$options = array_merge( $cache_options, $options );

	$font_path = sprintf( str_replace( '%s', '', T_EM_THEME_DIR_FONTS_URL .'/' ), get_home_url() );
	$cache_vars = array(
		'icon-font-path' => "'$font_path'",
	);
	$modify_vars = array_merge( $cache_vars, $modify_vars );

	$css_file_name = Less_Cache::Get( $less_files, $options, $modify_vars );
	$compiled = $dir_url . $css_file_name;

	if ( $delete_garbage ) :
		$garbage = t_em_garbage_cleaner( $dir_path, 'lesscache', 'ext' );
		foreach ( $garbage as $file ) :
			unlink( $file );
		endforeach;
	endif;

	return $compiled;
}

/**
 * Helper. Clean garbage into a directory. Used by t_em_lessphp_compiler() to clean the trash generated
 * by less.php
 *
 * @param string $directory Required. Directory where to search for garbage
 * @param string $search Required. Search string
 * @param string $type Optional. Search type: Values 'search' or 'ext' (file-extension or searchterm within filename)
 * @param bool $save_path Optional. Return also the file path. Default true
 *
 * @return array Array of files in $directory
 *
 * @since Twenty'em 1.0
 */
function t_em_garbage_cleaner( $directory, $search, $type = 'search', $save_path = true ){
	$garbage = array();
	$dir = dir( $directory );
	while ( false !== ( $file = $dir->read() ) ) :
		if ( $file != '.' && $file != '..' ) :
			$file = $directory . $file;
			if ( is_dir( $file ) ) :
				$garbage = array_merge( $garbage, t_em_garbage_cleaner( $file . '/', $search, $type, $save_path ) );
			else :
				if ( $type == 'search'
						? substr_count( $file, $search ) > 0
						: ( $type == 'ext'
							? substr( $file, - strlen( $search ) ) === $search
							: true ) ) :
					$garbage[] = $file;
				endif;
			endif;
		endif;
	endwhile;
	$dir->close();
	sort( $garbage, SORT_STRING );
	if ( ! $save_path ) $garbage = str_replace( $directory, '', array_values( $garbage ) );
	return $garbage;
}

/**
 * Helper. Register and Enqueue Bootstrap jQuery Plugins
 *
 * @param $plugin Required. String. Plugin name and extension (IE: transition.js)
 * @param $script Optional. String. Additional script if needed by the pluggin
 * @param $script_src Optional. String. Required if $script, the $script source address
 * @param $transition Optional. Bool. Enqueue transition.js Bootstrap plugin for simple transition effects
 * @param $in_footer Optional. Bool. If true, the script is placed before the </body> end tag
 *
 * @since Twenty'em 1.0
 */
function t_em_register_bootstrap_plugin( $plugin, $script = '', $script_src = '', $transition = true, $in_footer = false ){
	global $t_em_theme_data;
	/**
	 * Filter the list of dependencies for the current Bootstrap jQuery Plugin
	 *
	 * @param array An array of dependencies
	 * @since Twenty'em 1.0
	 */
	$deps = apply_filters( 't_em_filter_bootstrap_plugin_deps', array( 'jquery' ) );
	if ( $transition ) :
		$transition = 'transition.js';
		array_push( $deps, $transition );
		wp_register_script( 'transition.js', T_EM_THEME_DIR_JS_URL.'/bootstrap/transition.js', array( 'jquery' ), $t_em_theme_data['Version'], $in_footer );
	endif;
	wp_register_script( $plugin, T_EM_THEME_DIR_JS_URL.'/bootstrap/'.$plugin, $deps, $t_em_theme_data['Version'], $in_footer );
	wp_enqueue_script( $plugin );
	if ( $script ) :
		wp_register_script( $script, $script_src, array( 'jquery' ), $t_em_theme_data['Version'], $in_footer );
		wp_enqueue_script( $script );
	endif;
}

/**
 * Helper. Wrap paragraphs into <p> ...</p> tags, and clean empty lines
 *
 * @param string $paragraph Require Paragraph to be wrapped into <p> ...</p> tags
 *
 * @return string
 *
 * @since Twenty'em 1.0
 */
function t_em_wrap_paragraph( $paragraph ){
	$wrap_paragraph = explode( "\n", $paragraph );
	$i = 0;
	$ps = count($wrap_paragraph) - 1;
	while ( $i <= $ps ) :
		$p[$i] = "<p>" . $wrap_paragraph[$i] . "</p>";
		$clean_paragraph[$i] = str_replace( "<p>\r</p>", "", $p[$i] );
		$i++;
	endwhile;
	return implode( "", $clean_paragraph );
}
?>
