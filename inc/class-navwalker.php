<?php
/**
 * Twenty'em WordPress Framework.
 *
 * WARNING: This file is part of Twenty'em WordPress Framework.
 * DO NOT edit this file under any circumstances. Do all your modifications in the form of a child theme.
 *
 * @package			WordPress
 * @subpackage		Twenty'em
 * @author			RogerTM
 * @license			license.txt
 * @link			https://themingisprose.com/twenty-em
 * @since 			Twenty'em 1.2
 */

/**
 * IMPORTANT: This class is a copy, with a minimum variation, of WP Bootstrap Navwalker
 * @see https://github.com/wp-bootstrap/wp-bootstrap-navwalker
 */

/* Check if Class Exists. */
if ( ! class_exists( 'Twenty_Em_Navwalker' ) ) {
	/**
	 * Twenty_Em_Navwalker class.
	 *
	 * @extends Walker_Nav_Menu
	 */
	class Twenty_Em_Navwalker extends Walker_Nav_Menu {

		public function start_lvl( &$output, $depth = 0, $args = array() ) {
			$indent = str_repeat( "\t", $depth );
			// find all links with an id in the output.
			preg_match_all( '/(<a.*?id=\"|\')(.*?)\"|\'.*?>/im', $output, $matches );
			// with pointer at end of array check if we got an ID match.
			if ( end( $matches[2] ) ) :
				// build a string to use as aria-labelledby.
				$labledby = 'aria-labelledby="' . end( $matches[2] ) . '"';
			endif;

			$output .= "\n$indent<ul role=\"menu\" class=\" dropdown-menu\" " . $labledby . ">\n";
		}

		public function start_el( &$output, $item, $depth = 0, $args = array(), $id = 0 ){
			$indent = ( $depth ) ? str_repeat( "\t", $depth ) : '';

			$value = '';
			$class_names = $value;
			$classes = empty( $item->classes ) ? array() : (array) $item->classes;
			// Loop through the array and pick out any special classes that need
			// to be added to an element other than the main <li>.
			$extra_link_classes = array();
			$icon_class_string = '';
			foreach ( $classes as $key => $class ) :
				// test if this is a disabled link.
				if ( 'disabled' === $class ) :
					$extra_link_classes[] = 'disabled';
					unset( $classes[ $key ] );
				endif;
				// test for icon classes - Supports Icomoon.
				if ( 'icomoon-' === substr( $class, 0, 8 ) ) :
					$icon_class_string .= $class . ' ';
					unset( $classes[ $key ] );
				endif;
			endforeach;
			$classes[] = 'menu-item-' . $item->ID;
			// BSv4 classname - as of v4-alpha.
			$classes[] = 'nav-item';
			// reassign any filtered classes back to the $classes array.
			$classes = apply_filters( 'nav_menu_css_class', array_filter( $classes ), $item, $args );
			$class_names = join( ' ', $classes );
			if ( $args->has_children ) :
				$class_names .= ' dropdown';
			endif;
			if ( in_array( 'current-menu-item', $classes, true ) || in_array( 'current-menu-parent', $classes, true ) ) :
				$class_names .= ' active';
			endif;
			$class_names = $class_names ? ' class="' . esc_attr( $class_names ) . '"' : '';
			$id = apply_filters( 'nav_menu_item_id', 'menu-item-' . $item->ID, $item, $args );
			$id = $id ? ' id="' . esc_attr( $id ) . '"' : '';
			$output .= $indent . '<li' . $id . $value . $class_names . '>';
			$atts = array();

			if ( empty( $item->attr_title ) ) :
				$atts['title']  = ! empty( $item->title ) ? strip_tags( $item->title ) : '';
			else :
				$atts['title'] = $item->attr_title;
			endif;

			$atts['target'] = ! empty( $item->target ) ? $item->target : '';
			$atts['rel']    = ! empty( $item->xfn ) ? $item->xfn : '';
			// If item has_children add atts to <a>.
			if ( $args->has_children && 0 === $depth && $args->depth > 1 ) :
				$atts['href']   		= '#';
				$atts['data-toggle']	= 'dropdown';
				$atts['aria-haspopup']	= 'true';
				$atts['aria-expanded']	= 'false';
				$atts['class']			= 'dropdown-toggle nav-link';
				$atts['id']				= 'menu-item-dropdown-' . $item->ID;
			else :
				$atts['href'] 	= ! empty( $item->url ) ? $item->url : '';
				// if we are in a dropdown then the class .dropdown-item
				// should be used instead of .nav-link.
				if ( $depth > 0 ) :
					$atts['class']	= 'dropdown-item';
				else :
					$atts['class']	= 'nav-link';
				endif;
			endif;

			// Loop through the array of extra link classes plucked from the
			// parent <li>s classes array.
			if ( ! empty( $extra_link_classes ) ) :
				foreach ( $extra_link_classes as $link_class ) :
					if ( ! empty( $link_class ) ) :
						// update $atts with the extra class link.
						$atts['class'] .= ' ' . esc_attr( $link_class );
						// if the modification is a disabled class...
						if ( 'disabled' === $link_class ) :
							// then # the link so it doesn't point anywhere.
							$atts['href'] = '#';
						endif;
					endif;
				endforeach;
			endif;
			/** This is a bug in the original WP_Bootstrap_Navwalker class */
			// $atts = apply_filters( 'nav_menu_link_attributes', $atts, $item, $args );
			$atts = apply_filters( 'nav_menu_item_args', $atts, $item, $args );
			$attributes = '';
			foreach ( $atts as $attr => $value ) :
				if ( ! empty( $value ) ) :
					$value = ( 'href' === $attr ) ? esc_url( $value ) : esc_attr( $value );
					$attributes .= ' ' . $attr . '="' . $value . '"';
				endif;
			endforeach;

			$item_output = $args->before;
			$item_output .= '<a' . $attributes . '>';

			// initiate empty icon var then if we have a string containing icon classes...
			$icon_html = '';
			if ( ! empty( $icon_class_string ) ) :
				// append an <span> with the icon classes to what is output before links.
				$icon_html = '<span class="' . esc_attr( $icon_class_string ) . '" aria-hidden="true"></span> ';
			endif;

			$item_output .= $args->link_before . $icon_html . apply_filters( 'the_title', $item->title, $item->ID ) . $args->link_after;
			$item_output .= '</a>';
			$item_output .= $args->after;
			$output .= apply_filters( 'walker_nav_menu_start_el', $item_output, $item, $depth, $args );
		}

		public function display_element( $element, &$children_elements, $max_depth, $depth, $args, &$output ){
			if ( ! $element ) {
				return; }
			$id_field = $this->db_fields['id'];
			// Display this element.
			if ( is_object( $args[0] ) ) {
				$args[0]->has_children = ! empty( $children_elements[ $element->$id_field ] ); }
			parent::display_element( $element, $children_elements, $max_depth, $depth, $args, $output );
		}
	}
}
