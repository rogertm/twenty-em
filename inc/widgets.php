<?php
/**
 * Twenty'em WordPress Framework.
 *
 * WARNING: This file is part of Twenty'em WordPress Framework.
 * DO NOT edit this file under any circumstances. Do all your modifications in the form of a child theme.
 *
 * @package			WordPress
 * @subpackage		Twenty'em
 * @author			RogerTM
 * @license			license.txt
 * @link			https://themingisprose.com/twenty-em
 * @since 			Twenty'em 1.0
 */

/**
 * Twenty'em Widgets.
 *
 * @link http://codex.wordpress.org/Widgets_API
 */

/**
 * Recent_Posts Widget Class
 *
 * @uses t_em_featured_post_thumbnail()
 *
 * @since Twenty'em 1.0
 */
class Twenty_Em_Widget_Recent_Posts extends WP_Widget {

	function __construct() {
		$widget_ops = array('classname' => 't_em_widget_recent_posts', 'description' => __( 'Display the most Recent Posts on your site, including thumbnail and excerpt', 't_em' ) );
		parent::__construct('t_em_widget_recent_posts', sprintf( __( '%1$s Recent Posts', 't_em' ), '[T&#8217;em]' ), $widget_ops);
		$this->alt_option_name = 't_em_widget_recent_posts';

		add_action( 'save_post', array(&$this, 'flush_widget_cache') );
		add_action( 'deleted_post', array(&$this, 'flush_widget_cache') );
		add_action( 'switch_theme', array(&$this, 'flush_widget_cache') );
	}

	function widget($args, $instance) {
		$cache = wp_cache_get('t_em_widget_recent_posts', 'widget');

		if ( !is_array($cache) )
			$cache = array();

		if ( ! isset( $args['widget_id'] ) )
			$args['widget_id'] = $this->id;

		if ( isset( $cache[ $args['widget_id'] ] ) ) {
			echo $cache[ $args['widget_id'] ];
			return;
		}

		ob_start();
		extract($args);

		$title = apply_filters('widget_title', empty($instance['title']) ? __( 'Recent Posts', 't_em' ) : $instance['title'], $instance, $this->id_base);
		if ( empty( $instance['number'] ) || ! $number = absint( $instance['number'] ) )
			$number = get_option( 'posts_per_page' );

		if ( empty( $instance['thumbnail_width'] ) || ! $thumbnail_width = absint( $instance['thumbnail_width'] ) )
			$thumbnail_width = get_option( 'thumbnail_size_w' );
		if ( empty( $instance['thumbnail_height'] ) || ! $thumbnail_height = absint( $instance['thumbnail_height'] ) )
			$thumbnail_height = get_option( 'thumbnail_size_h' );
		if ( empty( $instance['thumbnail_align'] ) || ! $thumbnail_align = $instance['thumbnail_align'] )
			$thumbnail_align = 'float-left';
		$thumbnail = ( ! isset( $instance['thumbnail'] ) ) ? null : $instance['thumbnail'];

		if ( $thumbnail ) :

			// We pass to the query only posts with images attached
			$all_posts = get_posts( array( 'posts_per_page' => 99 ) );
			$i = 1;
			$p = array();
			foreach ( $all_posts as $cp ) :
				$img = get_children( array( 'post_parent' => $cp->ID, 'post_type' => 'attachment', 'post_mime_type' => 'image' ) );
				if ( ! empty( $img ) ) :
					$tp = $cp->ID;
					array_push( $p, $tp );
				endif;
			endforeach;
			$tp = count( $p );
			$lp = $tp - $number;
			while ( $i <= $lp ) :
				array_pop( $p );
				$i++;
			endwhile;
			$tp = count( $p );

			$recent_posts_args = array(
						'posts_per_page' => $tp,
						'post__in' => $p,
						'no_found_rows' => true,
						'post_status' => 'publish',
						'ignore_sticky_posts' => true
					);
		else :
			$recent_posts_args = array(
						'posts_per_page' => $number,
						'no_found_rows' => true,
						'post_status' => 'publish',
						'ignore_sticky_posts' => true
					);
		endif;
		$recent_posts = get_posts( $recent_posts_args );
?>
		<?php echo $before_widget; ?>
		<?php if ( $title ) echo $before_title . $title . $after_title; ?>
		<ul class="list-unstyled">
		<?php foreach ( $recent_posts as $post ) : setup_postdata( $post ); ?>
			<li class="t-em-recent-post-wrapper media">
				<?php if ( $thumbnail_align == 'float-left' ) : ?><div class="<?php echo $thumbnail_align ?>"><?php t_em_featured_post_thumbnail( $thumbnail_width, $thumbnail_height, true, 't-em-recent-post-thumbnail d-flex mr-3', $post->ID ) ?></div><?php endif; ?>
				<div class="t-em-recent-post-content media-body">
				<?php if ( $thumbnail_align == 'float-none' ) : ?><div class="<?php echo $thumbnail_align ?>"><?php t_em_featured_post_thumbnail( $thumbnail_width, $thumbnail_height, true, 't-em-recent-post-thumbnail d-flex mb-2', $post->ID ) ?></div><?php endif; ?>
					<h4 class="mt-0 mb-1 h5 d-inline">
						<a class="t-em-recent-post-title" href="<?php echo get_permalink( $post->ID ) ?>" title="<?php echo get_the_title( $post->ID ); ?>"><?php echo get_the_title( $post->ID ); ?></a>
					</h4>
					<?php $widget_trim_word = ( $post->post_excerpt ) ? $post->post_excerpt : $post->post_content; ?>
					<div class="t-em-recent-post-sumary"><?php echo wp_trim_words( $widget_trim_word, 15, null ) ?></div>
				</div>
				<?php if ( $thumbnail_align == 'float-right' ) : ?><div class="<?php echo $thumbnail_align ?>"><?php t_em_featured_post_thumbnail( $thumbnail_width, $thumbnail_height, true, 't-em-recent-post-thumbnail d-flex ml-3', $post->ID ) ?></div><?php endif; ?>
			</li>
		<?php endforeach; ?>
		</ul>
		<?php echo $after_widget; ?>
<?php
		// Reset the global $the_post as this query will have stomped on it
		wp_reset_postdata();

		$cache[$args['widget_id']] = ob_get_flush();
		wp_cache_set('t_em_widget_recent_posts', $cache, 'widget');
	}

	function update( $new_instance, $old_instance ) {
		$instance = array();
		$instance['title'] = strip_tags($new_instance['title']);
		$instance['number'] = (int) $new_instance['number'];
		$instance['thumbnail'] = ! empty( $new_instance['thumbnail'] ) ? 1 : 0;
		$instance['thumbnail_width'] = (int) $new_instance['thumbnail_width'];
		$instance['thumbnail_height'] = (int) $new_instance['thumbnail_height'];
		$instance['thumbnail_align'] = strip_tags( $new_instance['thumbnail_align'] );
		$this->flush_widget_cache();

		$alloptions = wp_cache_get( 'alloptions', 'options' );
		if ( isset($alloptions['t_em_widget_recent_posts']) )
			delete_option('t_em_widget_recent_posts');

		return $instance;
	}

	function flush_widget_cache() {
		wp_cache_delete('t_em_widget_recent_posts', 'widget');
	}

	function form( $instance ) {
		$instance = wp_parse_args(
						(array) $instance,
						array(
							'number' => get_option( 'posts_per_page' ),
							'thumbnail' => false,
							'title' => '',
							'thumbnail_width' => get_option( 'thumbnail_size_w' ),
							'thumbnail_height' => get_option( 'thumbnail_size_h' ),
							'thumbnail_align' => 'media-left pull-left',
						) );
		$title = isset($instance['title']) ? esc_attr($instance['title']) : '';
		$number = isset($instance['number']) ? absint($instance['number']) : get_option( 'posts_per_page' );
		$thumbnail = isset( $instance['thumbnail'] ) ? (bool) $instance['thumbnail'] : false;
		$thumbnail_width = isset( $instance['thumbnail_width'] ) ? absint( $instance['thumbnail_width'] ) : get_option( 'thumbnail_size_w' );
		$thumbnail_height = isset( $instance['thumbnail_height'] ) ? absint( $instance['thumbnail_height'] ) : get_option( 'thumbnail_size_h' );
		$thumbnail_align = isset($instance['thumbnail_align']) ? esc_attr($instance['thumbnail_align']) : 'media-left pull-left';
?>
		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e( 'Title:', 't_em' ); ?></label><br>
			<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo $title; ?>" /></p>

		<p><input type="checkbox" id="<?php echo $this->get_field_id( 'thumbnail' ) ?>" class="checkbox" name="<?php echo $this->get_field_name( 'thumbnail' ) ?>" <?php checked( $thumbnail ) ?> />
			<label for="<?php echo $this->get_field_id( 'thumbnail' ) ?>"><?php _e( 'Display only posts with thumbnails', 't_em' ) ?></label></p>


		<p><?php _e( 'Thumbnail dimensions:', 't_em' ) ?></p>
		<p><label for="<?php echo $this->get_field_id( 'thumbnail_width' ) ?>"><?php _e( 'Width:', 't_em' ) ?></label><br>
			<input class="widefat" id="<?php echo $this->get_field_id( 'thumbnail_width' ) ?>" type="number" name="<?php echo $this->get_field_name( 'thumbnail_width' ) ?>" value="<?php echo $thumbnail_width ?>" size="3"></p>

		<p><label for="<?php echo $this->get_field_id( 'thumbnail_height' ) ?>"><?php _e( 'Height:', 't_em' ) ?></label><br>
			<input class="widefat" id="<?php echo $this->get_field_id( 'thumbnail_height' ) ?>" type="number" name="<?php echo $this->get_field_name( 'thumbnail_height' ) ?>" value="<?php echo $thumbnail_height ?>" size="3"></p>

		<p><label for="<?php echo $this->get_field_id( 'thumbnail_align' ) ?>"><?php _e( 'Thumbnail alignment:', 't_em' ); ?></label><br>
			<select class="widefat" id="<?php echo $this->get_field_id( 'thumbnail_align' ) ?>" name="<?php echo $this->get_field_name( 'thumbnail_align' ) ?>">
				<option value="float-left" <?php selected( 'float-left', $thumbnail_align, true ) ?>><?php _ex( 'left', 'widget thumbnail alignment', 't_em' ) ?></option>
				<option value="float-right" <?php selected( 'float-right', $thumbnail_align, true ) ?>><?php _ex( 'right', 'widget thumbnail alignment', 't_em' ) ?></option>
				<option value="float-none" <?php selected( 'float-none', $thumbnail_align, true ) ?>><?php _ex( 'no align', 'widget thumbnail alignment', 't_em' ) ?></option>
			</select></p>

		<p><label for="<?php echo $this->get_field_id('number'); ?>"><?php _e( 'Number of posts to show:', 't_em' ); ?></label><br>
			<input class="widefat" id="<?php echo $this->get_field_id('number'); ?>" name="<?php echo $this->get_field_name('number'); ?>" type="number" value="<?php echo $number; ?>" size="3" /></p>
<?php
	}
}

/**
 * Popular_Posts Widget Class
 *
 * @uses t_em_featured_post_thumbnail()
 *
 * @since Twenty'em 1.0
 */
class Twenty_Em_Widget_Popular_Posts extends WP_Widget {

	function __construct() {
		$widget_ops = array('classname' => 't_em_popular_posts', 'description' => __( 'The most Popular Posts on your site', 't_em') );
		parent::__construct('t_em_popular_posts', sprintf( __( '%1$s Popular Posts', 't_em' ), '[T&#8217;em]' ), $widget_ops);
		$this->alt_option_name = 't_em_popular_posts';

		add_action( 'save_post', array(&$this, 'flush_widget_cache') );
		add_action( 'deleted_post', array(&$this, 'flush_widget_cache') );
		add_action( 'switch_theme', array(&$this, 'flush_widget_cache') );
	}

	function widget($args, $instance) {
		$cache = wp_cache_get('t_em_widget_popular_posts', 'widget');

		if ( !is_array($cache) )
			$cache = array();

		if ( ! isset( $args['widget_id'] ) )
			$args['widget_id'] = $this->id;

		if ( isset( $cache[ $args['widget_id'] ] ) ) {
			echo $cache[ $args['widget_id'] ];
			return;
		}

		ob_start();
		extract($args);

		$title = apply_filters('widget_title', empty($instance['title']) ? __( 'Popular Posts', 't_em' ) : $instance['title'], $instance, $this->id_base);
		if ( empty( $instance['number'] ) || ! $number = absint( $instance['number'] ) )
			$number = get_option( 'posts_per_page' );

		if ( empty( $instance['thumbnail_width'] ) || ! $thumbnail_width = absint( $instance['thumbnail_width'] ) )
			$thumbnail_width = get_option( 'thumbnail_size_w' );
		if ( empty( $instance['thumbnail_height'] ) || ! $thumbnail_height = absint( $instance['thumbnail_height'] ) )
			$thumbnail_height = get_option( 'thumbnail_size_h' );
		if ( empty( $instance['thumbnail_align'] ) || ! $thumbnail_align = $instance['thumbnail_align'] )
			$thumbnail_align = 'float-left';
		$thumbnail = ( ! isset( $instance['thumbnail'] ) ) ? null : $instance['thumbnail'];
		$comment_count = ( ! isset( $instance['comment_count'] ) ) ? null : $instance['comment_count'];

		if ( $thumbnail ) :

			// We pass to the query only posts with images attached
			$all_posts = get_posts( array( 'posts_per_page' => 99, 'orderby' => 'comment_count', 'order' => 'DESC' ) );
			$i = 1;
			$p = array();
			foreach ( $all_posts as $cp ) :
				$img = get_children( array( 'post_parent' => $cp->ID, 'post_type' => 'attachment', 'post_mime_type' => 'image' ) );
				if ( ! empty( $img ) ) :
					$tp = $cp->ID;
					array_push( $p, $tp );
				endif;
			endforeach;
			$tp = count( $p );
			$lp = $tp - $number;
			while ( $i <= $lp ) :
				array_pop( $p );
				$i++;
			endwhile;
			$tp = count( $p );

			$popular_posts_args = array(
									'posts_per_page' => $tp,
									'post__in' => $p,
									'no_found_rows' => true,
									'post_status' => 'publish',
									'ignore_sticky_posts' => true,
									'orderby' => 'comment_count',
									'order' => 'DESC'
								);
		else :
			$popular_posts_args = array(
									'posts_per_page' => $number,
									'no_found_rows' => true,
									'post_status' => 'publish',
									'ignore_sticky_posts' => true,
									'orderby' => 'comment_count',
									'order' => 'DESC'
								);
		endif;

		$popular_posts = get_posts( $popular_posts_args );
?>
		<?php echo $before_widget; ?>
		<?php if ( $title ) echo $before_title . $title . $after_title; ?>
		<ul class="list-unstyled">
		<?php foreach ( $popular_posts as $post ) : setup_postdata( $post ); ?>
			<li class="t-em-popular-post-wrapper media">
				<?php if ( $thumbnail_align == 'float-left' ) : ?><div class="<?php echo $thumbnail_align ?>"><?php t_em_featured_post_thumbnail( $thumbnail_width, $thumbnail_height, true, 't-em-popular-post-thumbnail d-flex mr-3', $post->ID ) ?></div><?php endif; ?>
				<div class="t-em-popular-post-content media-body">
				<?php if ( $thumbnail_align == 'float-none' ) : ?><div class="<?php echo $thumbnail_align ?>"><?php t_em_featured_post_thumbnail( $thumbnail_width, $thumbnail_height, true, 't-em-popular-post-thumbnail d-flex mb-2', $post->ID ) ?></div><?php endif; ?>
					<h4 class="mt-0 mb-1 h5 d-inline"><a class="t-em-popular-post-title" href="<?php echo get_permalink( $post->ID ) ?>" title="<?php echo get_the_title( $post->ID ); ?>"><?php echo get_the_title( $post->ID ); ?></a>
					</h4>
				<?php if ( $comment_count ) :
						$total_comments = get_comments_number( $post->ID );
						$comments_number = sprintf( _n( '- 1 Comment', '- %s Comments', $total_comments, 't_em' ), $total_comments );
				?>
					<small class="text-muted d-inline"><?php echo $comments_number; ?></small>
				<?php endif; ?>
					<?php $widget_trim_word = ( $post->post_excerpt ) ? $post->post_excerpt : $post->post_content; ?>
					<div class="t-em-popular-post-sumary"><?php echo wp_trim_words( $widget_trim_word, 15, null ) ?></div>
				</div>
				<?php if ( $thumbnail_align == 'float-right' ) : ?><div class="<?php echo $thumbnail_align ?>"><?php t_em_featured_post_thumbnail( $thumbnail_width, $thumbnail_height, true, 't-em-popular-post-thumbnail d-flex ml-3', $post->ID ) ?></div><?php endif; ?>
			</li>
		<?php endforeach; ?>
		</ul>
		<?php echo $after_widget; ?>
<?php
		// Reset the global $the_post as this query will have stomped on it
		wp_reset_postdata();

		$cache[$args['widget_id']] = ob_get_flush();
		wp_cache_set('t_em_widget_popular_posts', $cache, 'widget');
	}

	function update( $new_instance, $old_instance ) {
		$instance = array();
		$instance['title'] = strip_tags( $new_instance['title'] );
		$instance['number'] = (int) $new_instance['number'];
		$instance['thumbnail'] = ! empty( $new_instance['thumbnail'] ) ? 1 : 0;
		$instance['thumbnail_width'] = (int) $new_instance['thumbnail_width'];
		$instance['thumbnail_height'] = (int) $new_instance['thumbnail_height'];
		$instance['thumbnail_align'] = strip_tags( $new_instance['thumbnail_align'] );
		$instance['comment_count'] = ! empty( $new_instance['comment_count'] ) ? 1 : 0;
		$this->flush_widget_cache();

		$alloptions = wp_cache_get( 'alloptions', 'options' );
		if ( isset($alloptions['t_em_popular_posts']) )
			delete_option('t_em_popular_posts');

		return $instance;
	}

	function flush_widget_cache() {
		wp_cache_delete('t_em_widget_popular_posts', 'widget');
	}

	function form( $instance ) {
		$instance = wp_parse_args(
						(array) $instance,
						array(
							'number' => get_option( 'posts_per_page' ),
							'thumbnail' => false,
							'comment_count' => false,
							'title' => '',
							'thumbnail_width' => get_option( 'thumbnail_size_w' ),
							'thumbnail_height' => get_option( 'thumbnail_size_h' ),
							'thumbnail_align' => 'media-left pull-left',
						) );
		$title = isset($instance['title']) ? esc_attr($instance['title']) : '';
		$number = isset($instance['number']) ? absint($instance['number']) : get_option( 'posts_per_page' );
		$thumbnail = isset( $instance['thumbnail'] ) ? (bool) $instance['thumbnail'] : false;
		$thumbnail_width = isset( $instance['thumbnail_width'] ) ? absint( $instance['thumbnail_width'] ) : get_option( 'thumbnail_size_w' );
		$thumbnail_height = isset( $instance['thumbnail_height'] ) ? absint( $instance['thumbnail_height'] ) : get_option( 'thumbnail_size_h' );
		$thumbnail_align = isset($instance['thumbnail_align']) ? esc_attr($instance['thumbnail_align']) : 'media-left pull-left';
		$comment_count = isset( $instance['comment_count'] ) ? (bool) $instance['comment_count'] : false;
?>
		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e( 'Title:', 't_em' ); ?></label><br>
		<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo $title; ?>" /></p>

		<p><input type="checkbox" id="<?php echo $this->get_field_id( 'thumbnail' ) ?>" class="checkbox" name="<?php echo $this->get_field_name( 'thumbnail' ) ?>" <?php checked( $thumbnail ) ?> />
			<label for="<?php echo $this->get_field_id( 'thumbnail' ) ?>"><?php _e( 'Display only posts with thumbnails', 't_em' ) ?></label><br />

		<p><?php _e( 'Thumbnail dimensions:', 't_em' ) ?></p>

		<p><label for="<?php echo $this->get_field_id( 'thumbnail_width' ) ?>"><?php _e( 'Width:', 't_em' ) ?></label><br>
			<input class="widefat" id="<?php echo $this->get_field_id( 'thumbnail_width' ) ?>" type="number" name="<?php echo $this->get_field_name( 'thumbnail_width' ) ?>" value="<?php echo $thumbnail_width ?>" size="3"></p>

		<p><label for="<?php echo $this->get_field_id( 'thumbnail_height' ) ?>"><?php _e( 'Height:', 't_em' ) ?></label><br>
			<input class="widefat" id="<?php echo $this->get_field_id( 'thumbnail_height' ) ?>" type="number" name="<?php echo $this->get_field_name( 'thumbnail_height' ) ?>" value="<?php echo $thumbnail_height ?>" size="3"></p>

		<p><label for="<?php echo $this->get_field_id( 'thumbnail_align' ) ?>"><?php _e( 'Thumbnail alignment:', 't_em' ); ?></label><br>
			<select class="widefat" id="<?php echo $this->get_field_id( 'thumbnail_align' ) ?>" name="<?php echo $this->get_field_name( 'thumbnail_align' ) ?>">
				<option value="float-left" <?php selected( 'float-left', $thumbnail_align, true ) ?>><?php _ex( 'left', 'widget thumbnail alignment', 't_em' ) ?></option>
				<option value="float-right" <?php selected( 'float-right', $thumbnail_align, true ) ?>><?php _ex( 'right', 'widget thumbnail alignment', 't_em' ) ?></option>
				<option value="float-none" <?php selected( 'float-none', $thumbnail_align, true ) ?>><?php _ex( 'no align', 'widget thumbnail alignment', 't_em' ) ?></option>
			</select></p>

		<p><input type="checkbox" id="<?php echo $this->get_field_id( 'comment_count' ) ?>" class="checkbox" name="<?php echo $this->get_field_name( 'comment_count' ) ?>" <?php checked( $comment_count ) ?> />
			<label for="<?php echo $this->get_field_id( 'comment_count' ) ?>"><?php _e( 'Show comment count', 't_em' ) ?></label></p>

		<p><label for="<?php echo $this->get_field_id('number'); ?>"><?php _e( 'Number of posts to show:', 't_em' ); ?></label><br>
			<input class="widefat" id="<?php echo $this->get_field_id('number'); ?>" name="<?php echo $this->get_field_name('number'); ?>" type="number" value="<?php echo $number; ?>" size="3" /></p>
<?php
	}
}

/**
 * Image_Gallery Widget Class
 *
 * @since Twenty'em 1.0
 */
class Twenty_Em_Widget_Image_Gallery extends WP_Widget {

	function __construct() {
		$widget_ops = array( 'classname' => 't_em_image_gallery', 'description' => __( 'Display all images on your site attached to a post', 't_em' ) );
		parent::__construct('t_em_image_gallery', sprintf( __( '%1$s Image Gallery', 't_em' ), '[T&#8217;em]' ), $widget_ops);
		$this->alt_option_name = 't_em_image_gallery';

		add_action( 'save_post', array(&$this, 'flush_widget_cache') );
		add_action( 'deleted_post', array(&$this, 'flush_widget_cache') );
		add_action( 'switch_theme', array(&$this, 'flush_widget_cache') );
	}

	function widget($args, $instance) {
		$cache = wp_cache_get('t_em_widget_image_gallery', 'widget');

		if ( !is_array($cache) )
			$cache = array();

		if ( ! isset( $args['widget_id'] ) )
			$args['widget_id'] = $this->id;

		if ( isset( $cache[ $args['widget_id'] ] ) ) {
			echo $cache[ $args['widget_id'] ];
			return;
		}

		ob_start();
		extract($args);

		$title = apply_filters('widget_title', empty($instance['title']) ? __( 'Image Gallery', 't_em' ) : $instance['title'], $instance, $this->id_base);
		if ( empty( $instance['number'] ) || ! $number = absint( $instance['number'] ) )
			$number = get_option( 'posts_per_page' );

		if ( empty( $instance['thumbnail_width'] ) || ! $thumbnail_width = absint( $instance['thumbnail_width'] ) )
			$thumbnail_width = get_option( 'medium_size_w' );
		if ( empty( $instance['thumbnail_height'] ) || ! $thumbnail_height = absint( $instance['thumbnail_height'] ) )
			$thumbnail_height = get_option( 'medium_size_h' );
		$columns = ( ! isset( $instance['columns'] ) ) ? 2 : $instance['columns'];

		// We pass to the query only posts with images attached
		$all_posts = get_posts( array( 'posts_per_page' => 99 ) );
		$i = 1;
		$p = array();
		foreach ( $all_posts as $cp ) :
			$img = get_children( array( 'post_parent' => $cp->ID, 'post_type' => 'attachment', 'post_mime_type' => 'image' ) );
			if ( ! empty( $img ) ) :
				$tp = $cp->ID;
				array_push( $p, $tp );
			endif;
		endforeach;
		$tp = count( $p );
		$lp = $tp - $number;
		while ( $i <= $lp ) :
			array_pop( $p );
			$i++;
		endwhile;
		$tp = count( $p );

		$gallery_args = array(
							'post_type'			=> 'post',
							'post__in'			=> $p,
							'posts_per_page'	=> $tp,
						);
		$gallery_posts = get_posts( $gallery_args );
?>
		<?php echo $before_widget; ?>
		<?php if ( $title ) echo $before_title . $title . $after_title; ?>
		<div class="row">
<?php
				$i = 0;
				foreach ( $gallery_posts as $post ) : setup_postdata( $post );
					if ( 0 == $i % $columns ) :
						$one_column_gallery = ( 1 == $columns ) ? 't-em-one-column-gallery' : null;
						echo '</div>';
						echo '<div class="row t-em-img-gallery-row-wrapper '. $one_column_gallery .'">';
					endif;
					$cols = 12 / $columns;
					echo '<div class="col-xs-'. $cols .' col-md-'. $cols .'">';
						t_em_featured_post_thumbnail( $thumbnail_width, $thumbnail_height, true, 't-em-img-gallery-thumbnail my-3', $post->ID );
					echo '</div>';
					$i++;
				endforeach;
?>
		</div><!-- .row -->
		<?php echo $after_widget; ?>
<?php
		// Reset the global $the_post as this query will have stomped on it
		wp_reset_postdata();

		$cache[$args['widget_id']] = ob_get_flush();
		wp_cache_set('t_em_widget_image_gallery', $cache, 'widget');
	}

	function update( $new_instance, $old_instance ) {
		$instance = array();
		$instance['title'] = strip_tags($new_instance['title']);
		$instance['number'] = (int) $new_instance['number'];
		$instance['thumbnail_width'] = (int) $new_instance['thumbnail_width'];
		$instance['thumbnail_height'] = (int) $new_instance['thumbnail_height'];
		$instance['columns'] = (int) $new_instance['columns'];
		$this->flush_widget_cache();

		$alloptions = wp_cache_get( 'alloptions', 'options' );
		if ( isset($alloptions['t_em_image_gallery']) )
			delete_option('t_em_image_gallery');

		return $instance;
	}

	function flush_widget_cache() {
		wp_cache_delete('t_em_widget_image_gallery', 'widget');
	}

	function form( $instance ) {
		$instance = wp_parse_args(
						(array) $instance,
						array(
							'number' => get_option( 'posts_per_page' ),
							'columns' => 2,
							'title' => '',
							'thumbnail_width' => get_option( 'medium_size_w' ),
							'thumbnail_height' => get_option( 'medium_size_h' ),
						) );
		$title = isset( $instance['title']) ? esc_attr($instance['title'] ) : '';
		$number = isset( $instance['number']) ? absint($instance['number'] ) : get_option( 'posts_per_page' );
		$thumbnail_width = isset( $instance['thumbnail_width'] ) ? absint( $instance['thumbnail_width'] ) : get_option( 'medium_size_w' );
		$thumbnail_height = isset( $instance['thumbnail_height'] ) ? absint( $instance['thumbnail_height'] ) : get_option( 'medium_size_h' );
		$columns = isset( $instance['columns'] ) ? absint( $instance['columns'] ) : 2;
?>
		<p><label for="<?php echo $this->get_field_id('title'); ?>"><?php _e( 'Title:', 't_em' ); ?></label><br>
			<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo $title; ?>" /></p>

		<p><label for="<?php echo $this->get_field_id( 'number' ); ?>"><?php _e( 'Number of images to show:', 't_em' ); ?></label><br>
			<input class="widefat" id="<?php echo $this->get_field_id( 'number' ); ?>" name="<?php echo $this->get_field_name('number'); ?>" type="number" value="<?php echo $number; ?>" size="3" /></p>

		<p><?php _e( 'Thumbnail dimensions:', 't_em' ) ?></p>

		<p><label for="<?php echo $this->get_field_id( 'thumbnail_width' ) ?>"><?php _e( 'Width:', 't_em' ) ?></label><br>
			<input class="widefat" id="<?php echo $this->get_field_id( 'thumbnail_width' ) ?>" type="number" name="<?php echo $this->get_field_name( 'thumbnail_width' ) ?>" value="<?php echo $thumbnail_width ?>" size="3"></p>

		<p><label for="<?php echo $this->get_field_id( 'thumbnail_height' ) ?>"><?php _e( 'Height:', 't_em' ) ?></label><br>
			<input class="widefat" id="<?php echo $this->get_field_id( 'thumbnail_height' ) ?>" type="number" name="<?php echo $this->get_field_name( 'thumbnail_height' ) ?>" value="<?php echo $thumbnail_height ?>" size="3"></p>

		<p><label for="<?php echo $this->get_field_id( 'columns' ) ?>"><?php _e( 'Show images in columns', 't_em' ); ?></label><br>
			<select class="widefat" id="<?php echo $this->get_field_id( 'columns' ) ?>" name="<?php echo $this->get_field_name( 'columns' ) ?>">
				<option value="1" <?php selected( 1, $columns, true ) ?>><?php _ex( '1', 'number of columns in image gallery widget', 't_em' ) ?></option>
				<option value="2" <?php selected( 2, $columns, true ) ?>><?php _ex( '2', 'number of columns in image gallery widget', 't_em' ) ?></option>
				<option value="3" <?php selected( 3, $columns, true ) ?>><?php _ex( '3', 'number of columns in image gallery widget', 't_em' ) ?></option>
			</select></p>
<?php
	}
}

/**
 * Recent_Comments widget class
 *
 * @since Twenty'em 1.0
 */
class Twenty_Em_Widget_Recent_Comments extends WP_Widget {

	function __construct() {
		$widget_ops = array('classname' => 't_em_recent_comments', 'description' => __( 'The most recent comments', 't_em' ) );
		parent::__construct('t_em_recent_comments', sprintf( __('%1$s Recent Comments', 't_em'), '[T&#8217;em]' ), $widget_ops);
		$this->alt_option_name = 't_em_recent_comments';

		add_action( 'comment_post', array($this, 'flush_widget_cache') );
		add_action( 'edit_comment', array($this, 'flush_widget_cache') );
		add_action( 'transition_comment_status', array($this, 'flush_widget_cache') );
	}

	function flush_widget_cache() {
		wp_cache_delete('t_em_recent_comments', 'widget');
	}

	function widget( $args, $instance ) {
		global $comments, $comment;

		$cache = wp_cache_get('t_em_recent_comments', 'widget');

		if ( ! is_array( $cache ) )
			$cache = array();

		if ( ! isset( $args['widget_id'] ) )
			$args['widget_id'] = $this->id;

		if ( isset( $cache[ $args['widget_id'] ] ) ) {
			echo $cache[ $args['widget_id'] ];
			return;
		}

 		extract($args, EXTR_SKIP);

		$title = ( ! empty( $instance['title'] ) ) ? $instance['title'] : __( 'Recent Comments', 't_em' );
		$title = apply_filters( 'widget_title', $title, $instance, $this->id_base );
		$number = ( ! empty( $instance['number'] ) ) ? absint( $instance['number'] ) : get_option( 'posts_per_page' );
		$author_name_url = ( ! isset( $instance['author_name_url'] ) ) ? null : $instance['author_name_url'];
		$avatar = ( ! isset( $instance['avatar'] ) ) ? 1 : $instance['avatar'];

		if ( ! $number )
 			$number = get_option( 'posts_per_page' );

		$comments = get_comments( apply_filters( 'widget_comments_args', array( 'number' => $number, 'status' => 'approve', 'post_status' => 'publish', 'type' => 'comment' ) ) );
		echo $before_widget;
		if ( $title )
			echo $before_title . $title . $after_title;
?>
		<ul class="list-unstyled">
<?php
		if ( $comments ) {
			// Prime cache for associated posts. (Prime post term cache if we need it for permalinks.)
			$post_ids = array_unique( wp_list_pluck( $comments, 'comment_post_ID' ) );
			_prime_post_caches( $post_ids, strpos( get_option( 'permalink_structure' ), '%category%' ), false );

			foreach ( (array) $comments as $comment) {
				$comment_author_link = ( $author_name_url ) ? get_comment_author_link() . _x( ' on ', 'Recent Comment Widget', 't_em' ) : null;
?>
			<li class="t-em-recent-comments media">
			<?php if ( $avatar ) : ?>
			<div class="d-flex mr-3"><?php echo get_avatar( get_the_author_meta( 'ID' ), '', '', get_comment_author() ); ?></div>
			<?php endif; ?>
				<div class="media-body">
					<?php echo $comment_author_link; ?>
					<a href="<?php echo esc_url( get_comment_link($comment->comment_ID) ); ?>"><?php echo get_the_title($comment->comment_post_ID); ?></a>
				</div>
			</li>
<?php
			}
 		}
?>
		</ul>
<?php
		echo $after_widget;

		$cache[$args['widget_id']] = ob_get_flush();
		wp_cache_set('t_em_recent_comments', $cache, 'widget');
	}

	function update( $new_instance, $old_instance ) {
		$instance = array();
		$instance['title'] = strip_tags($new_instance['title']);
		$instance['number'] = absint( $new_instance['number'] );
		$instance['author_name_url'] = ! empty( $new_instance['author_name_url'] ) ? 1 : 0;
		$instance['avatar'] = ! empty( $new_instance['avatar'] ) ? 1 : 0;
		$this->flush_widget_cache();

		$alloptions = wp_cache_get( 'alloptions', 'options' );
		if ( isset($alloptions['t_em_recent_comments']) )
			delete_option('t_em_recent_comments');

		return $instance;
	}

	function form( $instance ) {
		$instance = wp_parse_args( (array) $instance, array( 'number' => get_option( 'posts_per_page' ), 'author_name_url' => false, 'avatar' => true, 'title' => '' ) );
		$title  = isset( $instance['title'] ) ? esc_attr( $instance['title'] ) : '';
		$number = isset( $instance['number'] ) ? absint( $instance['number'] ) : get_option( 'posts_per_page' );
		$author_name_url = isset( $instance['author_name_url'] ) ? (bool) $instance['author_name_url'] : false;
		$avatar = isset( $instance['avatar'] ) ? (bool) $instance['avatar'] : true;
?>
		<p><label for="<?php echo $this->get_field_id( 'title' ); ?>"><?php _e( 'Title:', 't_em' ); ?></label><br>
			<input class="widefat" id="<?php echo $this->get_field_id( 'title' ); ?>" name="<?php echo $this->get_field_name( 'title' ); ?>" type="text" value="<?php echo $title; ?>" /></p>

		<p><label for="<?php echo $this->get_field_id( 'number' ); ?>"><?php _e( 'Number of comments to show:', 't_em' ); ?></label><br>
			<input class="widefat" id="<?php echo $this->get_field_id( 'number' ); ?>" name="<?php echo $this->get_field_name( 'number' ); ?>" type="number" value="<?php echo $number; ?>" size="3" /></p>

		<p><input type="checkbox" id="<?php echo $this->get_field_id( 'author_name_url' ) ?>" class="checkbox" name="<?php echo $this->get_field_name( 'author_name_url' ) ?>" <?php checked( $author_name_url ) ?>>
			<label for="<?php echo $this->get_field_id( 'author_name_url' ) ?>"><?php _e( 'Show author name/url', 't_em' ) ?></label></p>

		<p><input type="checkbox" id="<?php echo $this->get_field_id( 'avatar' ); ?>" class="checkbox" name="<?php echo $this->get_field_name( 'avatar' ); ?>" <?php checked( $avatar ); ?>>
			<label for="<?php echo $this->get_field_id( 'avatar' ); ?>"><?php _e( 'Display users avatar', 't_em' ); ?></label></p>
<?php
	}
}

/**
 * FeedBurner_Subscribe widget class
 *
 * @since Twenty'em 1.0
 */
class Twenty_Em_Widget_Feed_Burner_Subscribe extends WP_Widget{

	function __construct(){
		$widget_ops = array('classname' => 't_em_widget_feed_burner_subscribe', 'description' => __( 'Subscribe via FeedBurner', 't_em') );
		parent::__construct('t_em_widget_feed_burner_subscribe', sprintf( __( '%1$s Subscribe via FeedBurner', 't_em' ), '[T&#8217;em]' ), $widget_ops);
		$this->alt_option_name = 't_em_widget_feed_burner_subscribe';
	}

	function widget( $args, $instance ){
		$cache = wp_cache_get( 't_em_widget_feed_burner_subscribe', 'widget' );

		if ( ! is_array( $cache ) )
			$cache = array();

		if ( ! isset( $args['widget_id'] ) )
			$args['widget_id'] = $this->id;

		if ( isset( $cache[ $args['widget_id'] ] ) ) :
			echo $cache[ $args['widget_id'] ];
			return;
		endif;

		ob_start();
		extract( $args );

		$title = apply_filters( 'widget_title', empty( $instance['title'] ) ? __( 'Subscribe via FeedBurner', 't_em' ) : $instance['title'], $instance, $this->id_base );
		$feedburner_uri = ( ! empty( $instance['feedburner_uri'] ) ) ? $instance['feedburner_uri'] : null;
		$feedburner_description = ( ! empty( $instance['feedburner_description'] ) ) ? $instance['feedburner_description'] : null;
		$feedburner_placeholder = ( ! empty( $instance['feedburner_placeholder'] ) ) ? $instance['feedburner_placeholder'] : __( 'email@domain.com', 't_em' );
		$feedburner_button_label = ( ! empty( $instance['feedburner_button_label'] ) ) ? $instance['feedburner_button_label'] : __( 'Subscribe', 't_em' );
		$feedburner_action = 'http://feedburner.google.com/fb/a/mailverify';

		echo $before_widget;
		if ( $title ) echo $before_title . $title . $after_title;
?>
		<form class="feedburner-subscribe" action="<?php echo $feedburner_action; ?>" method="post" target="popupwindow" onsubmit="window.open('<?php echo $feedburner_action; ?>?uri=<?php echo $feedburner_uri; ?>', 'popupwindow', 'scrollbars=yes,width=550,height=520');return true">
			<?php if ( $feedburner_description ) : ?>
				<p><?php echo $feedburner_description; ?></p>
			<?php endif; ?>
			<div class="input-group">
				<label class="sr-only" for="email-address"><?php _e( 'Email address', 't_em' ); ?></label>
				<input id="email-address" class="form-control" type="email" name="email" placeholder="<?php echo $feedburner_placeholder; ?>" required>
				<input type="hidden" value="<?php echo $feedburner_uri; ?>" name="uri"/>
				<input type="hidden" name="loc" value="en_US"/>
				<span class="input-group-btn">
					<button class="btn btn-secondary" type="submit">
						<span class="icomoon-envelope"></span>
						<span class="label-btn sr-only"><?php echo $feedburner_button_label; ?></span>
					</button>
				</span>
			</div>
		</form>
<?php
		echo $after_widget;

		$cache[ $args['widget_id'] ] = ob_get_flush();
		wp_cache_set( 't_em_widget_feed_burner_subscribe', $cache, 'widget' );
	}

	function update( $new_instance, $old_instance ){
		$instance = array();
		$instance['title'] = strip_tags( $new_instance['title'] );
		$instance['feedburner_uri'] = strip_tags( $new_instance['feedburner_uri'] );
		$instance['feedburner_description'] = strip_tags( $new_instance['feedburner_description'] );
		$instance['feedburner_placeholder'] = strip_tags( $new_instance['feedburner_placeholder'] );
		$instance['feedburner_button_label'] = strip_tags( $new_instance['feedburner_button_label'] );
		$this->flush_widget_cache();

		$alloptions = wp_cache_get( 'alloptions', 'options' );
		if ( isset( $alloptions['t_em_widget_feed_burner_subscribe'] ) )
			delete_option( 't_em_widget_feed_burner_subscribe' );

		return $instance;
	}

	function flush_widget_cache(){
		wp_cache_delete( 't_em_widget_feed_burner_subscribe', 'widget' );
	}

	function form( $instance ){
		$instance = wp_parse_args( (array) $instance, array( 'feedburner_uri' => null, 'feedburner_description' => null, 'feedburner_placeholder' => null, 'title' => '' ) );
		$title = isset( $instance['title'] ) ? esc_attr( $instance['title'] ) : null;
		$feedburner_uri = isset( $instance['feedburner_uri'] ) ? esc_attr( $instance['feedburner_uri'] ) : null;
		$feedburner_description = isset( $instance['feedburner_description'] ) ? esc_attr( $instance['feedburner_description'] ) : null;
		$feedburner_placeholder = isset( $instance['feedburner_placeholder'] ) ? esc_attr( $instance['feedburner_placeholder'] ) : null;
		$feedburner_button_label = isset( $instance['feedburner_button_label'] ) ? esc_attr( $instance['feedburner_button_label'] ) : null;
?>
		<p><label for="<?php echo $this->get_field_id('title') ?>"><?php _e( 'Title:', 't_em' ); ?></label><br>
			<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo $title; ?>" /></p>

		<p><label for="<?php echo $this->get_field_id('feedburner_uri') ?>"><?php _e( 'Your FeedBurner URI (required)', 't_em' ) ?></label><br>
			<input class="widefat" id="<?php echo $this->get_field_id('feedburner_uri'); ?>" name="<?php echo $this->get_field_name('feedburner_uri'); ?>" type="text" value="<?php echo $feedburner_uri; ?>" required /></p>

		<p><label for="<?php echo $this->get_field_id('feedburner_description') ?>"><?php _e( 'Short text inviting users to subscribe...', 't_em' ) ?></label><br>
			<input class="widefat" id="<?php echo $this->get_field_id('feedburner_description'); ?>" name="<?php echo $this->get_field_name('feedburner_description'); ?>" type="text" value="<?php echo $feedburner_description; ?>" /></p>

		<p><label for="<?php echo $this->get_field_id('feedburner_placeholder') ?>"><?php _e( 'Form placeholder', 't_em' ) ?></label><br>
			<input class="widefat" id="<?php echo $this->get_field_id('feedburner_placeholder'); ?>" name="<?php echo $this->get_field_name('feedburner_placeholder'); ?>" type="text" value="<?php echo $feedburner_placeholder; ?>" /></p>

		<p><label for="<?php echo $this->get_field_id('feedburner_button_label') ?>"><?php _e( 'Button Label', 't_em' ) ?></label><br>
			<input class="widefat" id="<?php echo $this->get_field_id('feedburner_button_label'); ?>" name="<?php echo $this->get_field_name('feedburner_button_label'); ?>" type="text" value="<?php echo $feedburner_button_label; ?>" /></p>
<?php
	}
}

/**
 * Contributors widget class
 *
 * @since Twenty'em 1.0
 */
class Twenty_Em_Widget_Contributors extends WP_Widget{

	function __construct(){
		$widget_ops= array( 'classname' => 't_em_widget_contributors', 'description' => __( 'A list of your site&#8217;s contributors', 't_em' ) );
		parent::__construct( 't_em_widget_contributors', sprintf( __( '%1$s Contributors', 't_em' ), '[T&#8217;em]' ), $widget_ops );
	}

	function widget( $args, $instance ){
		$cache = wp_cache_get( 't_em_widget_contributors', 'widget' );

		if ( ! is_array( $cache ) )
			$cache = array();

		if ( ! isset( $args['widget_id'] ) )
			$args['widget_id'] = $this->id;

		if ( isset( $cache[ $args['widget_id'] ] ) ) {
			echo $cache[ $args['widget_id'] ];
			return;
		}

		ob_start();
		extract( $args );

		$title = apply_filters( 'widget_title', empty( $instance['title'] ) ? __( 'Contributors', 't_em' ) : $instance['title'], $instance, $this->id_base );
		if ( empty( $instance['number'] ) || ! $number = absint( $instance['number'] ) )
			$number = get_option( 'posts_per_page' );
		$orderby = empty( $instance['orderby'] ) ? 'display_name' : $instance['orderby'];
		$order = empty( $instance['order'] ) ? 'ASC' : $instance['order'];
		$exclude = empty( $instance['exclude'] ) ? '' : $instance['exclude'];
		$avatar = ( ! isset( $instance['avatar'] ) ) ? 0 : $instance['avatar'];

		$user_fields = array(
			'fields'	=> 'ID',
			'number'	=> $number,
			'orderby'	=> $orderby,
			'order'		=> $order,
			'exclude'	=> $exclude,
			'who'		=> 'authors',
			);
		$contributors = get_users( $user_fields );

		echo $before_widget;
		if ( $title ) echo $before_title . $title . $after_title;
?>
		<ul class="list-unstyled">
<?php
		foreach ( $contributors as $contributor ) :
			$post_count = count_user_posts( $contributor );
			// Jump over users that has not published a post
			if( ! $post_count )
				continue;
?>
			<li class="t-em-contributor-wrapper media">
			<?php if ( $avatar ) : ?>
			<div class="d-flex mr-3"><?php echo get_avatar( $contributor, '', '', get_the_author_meta( 'display_name', $contributor ) ); ?></div>
			<?php endif; ?>
				<div class="t-em-contributor-name media-body">
					<a href="<?php echo esc_url( get_author_posts_url( $contributor ) ); ?>">
					<?php echo get_the_author_meta( 'display_name', $contributor ); ?></a>
				</div>
			</li>
<?php
		endforeach;
?>
		</ul>
<?php
		echo $after_widget;

		$cache[$args['widget_id']] = ob_get_flush();
		wp_cache_set('t_em_widget_contributors', $cache, 'widget');
	}

	function update( $new_instance, $old_instance ){
		$instance = array();
		$instance['title'] = strip_tags($new_instance['title']);
		$instance['number'] = (int) $new_instance['number'];
		$instance['avatar'] = ! empty( $new_instance['avatar'] ) ? 1 : 0;
		if ( in_array( $new_instance['orderby'], array( 'display_name', 'post_count', 'ID' ) ) ) :
			$instance['orderby'] = $new_instance['orderby'];
		else :
			$instance['orderby'] = 'display_name';
		endif;
		if ( in_array( $new_instance['order'], array( 'ASC', 'DESC' ) ) ) :
			$instance['order'] = $new_instance['order'];
		else :
			$instance['order'] = 'ASC';
		endif;
		$instance['exclude'] = strip_tags( $new_instance['exclude'] );

		return $instance;
	}

	function flush_widget_cache() {
		wp_cache_delete('t_em_widget_contributors', 'widget');
	}

	function form( $instance ){
		$instance = wp_parse_args( (array) $instance, array( 'number' => get_option( 'posts_per_page' ), 'orderby' => 'display_name', 'order' => 'ASC', 'exclude' => '', 'avatar' => false, 'title' => '' ) );
		$title = isset($instance['title']) ? esc_attr($instance['title']) : '';
		$number = isset($instance['number']) ? absint($instance['number']) : get_option( 'posts_per_page' );
		$avatar = isset( $instance['avatar'] ) ? (bool) $instance['avatar'] : false;
		$exclude = esc_attr( $instance['exclude'] );
?>
		<p><label for="<?php echo $this->get_field_id('title') ?>"><?php _e( 'Title:', 't_em' ); ?></label><br>
			<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo $title; ?>" /></p>

		<p><label for="<?php echo $this->get_field_id('orderby') ?>"><?php _e( 'Order by', 't_em' ); ?></label><br>
			<select name="<?php echo $this->get_field_name('orderby') ?>" id="<?php echo $this->get_field_id('orderby'); ?>" class="widefat">
				<option value="display_name" <?php selected( $instance['orderby'], 'display_name' ) ?>><?php _e( 'User Name', 't_em' ) ?></option>
				<option value="post_count" <?php selected( $instance['orderby'], 'post_count' ) ?>><?php _e( 'Post Count', 't_em' ) ?></option>
				<option value="ID" <?php selected( $instance['orderby'], 'ID' ) ?>><?php _e( 'User ID', 't_em' ) ?></option>
			</select></p>

		<p><label for="<?php echo $this->get_field_id('order') ?>"><?php _e( 'Order', 't_em' ); ?></label><br>
			<select name="<?php echo $this->get_field_name('order') ?>" id="<?php echo $this->get_field_id('order'); ?>" class="widefat">
				<option value="ASC" <?php selected( $instance['order'], 'ASC' ) ?>><?php _e( 'Ascending', 't_em' ) ?></option>
				<option value="DESC" <?php selected( $instance['order'], 'DESC' ) ?>><?php _e( 'Descending', 't_em' ) ?></option>
			</select></p>

		<p><label for="<?php echo $this->get_field_id('number'); ?>"><?php _e( 'Number of users to show:', 't_em' ); ?></label><br>
			<input class="widefat" id="<?php echo $this->get_field_id('number'); ?>" name="<?php echo $this->get_field_name('number'); ?>" type="number" value="<?php echo $number; ?>" /></p>

		<p><label for="<?php echo $this->get_field_id('exclude'); ?>"><?php _e( 'Exclude:', 't_em' ); ?></label><br>
			<input type="text" value="<?php echo $exclude; ?>" name="<?php echo $this->get_field_name('exclude'); ?>" id="<?php echo $this->get_field_id('exclude'); ?>" class="widefat" /><br>
			<small><?php _e( 'Users IDs, separated by commas.', 't_em' ); ?></small></p>

		<p><input type="checkbox" id="<?php echo $this->get_field_id( 'avatar' ); ?>" class="checkbox" name="<?php echo $this->get_field_name( 'avatar' ); ?>" <?php checked( $avatar ); ?>>
		<label for="<?php echo $this->get_field_id( 'avatar' ); ?>"><?php _e( 'Display users avatar', 't_em' ); ?></label></p>
<?php
	}

}

/**
 * Register widgets
 */
function t_em_register_widgets() {
	register_widget( 'Twenty_Em_Widget_Popular_Posts' );
	register_widget( 'Twenty_Em_Widget_Image_Gallery' );
	register_widget( 'Twenty_Em_Widget_Recent_Posts' );
	register_widget( 'Twenty_Em_Widget_Recent_Comments' );
	register_widget( 'Twenty_Em_Widget_Feed_Burner_Subscribe' );
	register_widget( 'Twenty_Em_Widget_Contributors' );
}
add_action( 'widgets_init', 't_em_register_widgets' );
?>
