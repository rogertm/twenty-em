<?php
/**
 * Twenty'em WordPress Framework.
 *
 * WARNING: This file is part of Twenty'em WordPress Framework.
 * DO NOT edit this file under any circumstances. Do all your modifications in the form of a child theme.
 *
 * @package			WordPress
 * @subpackage		Twenty'em
 * @author			RogerTM
 * @license			license.txt
 * @link			https://themingisprose.com/twenty-em
 * @since 			Twenty'em 1.2
 */

/**
 * If WP_DEBUG is set to true, show debug information for the user
 */
function t_em_register_debug_init(){
	if ( WP_DEBUG ) :
		add_settings_field( 't_em_debug_info', __( 'Debug Information', 't_em' ), 't_em_settings_field_debug_set', 'twenty-em-options', 'twenty-em-section' );
	endif;
}
add_action( 't_em_admin_action_add_settings_field', 't_em_register_debug_init', 999 );

/**
 * Return an array of Debug Options for Twenty'em admin panel.
 * @return array
 *
 * @since Twenty'em 1.2
 */
function t_em_debug_options(){
	$debug_options = array(
		'theme-data'	=> array(
			'value'		=> 'theme-data',
			'label'		=> __( 'Theme Data', 't_em' ),
			'callback'	=> ( apply_filters( 't_em_admin_filter_debug_options_theme_data', true ) ) ? t_em_debug_theme_data_callback() : null,
		),
		'theme-setting'	=> array(
			'value'		=> 'theme-setting',
			'label'		=> __( 'Theme Setting', 't_em' ),
			'callback'	=> ( apply_filters( 't_em_admin_filter_debug_options_theme_setting', true ) ) ? t_em_debug_theme_setting_callback() : null,
		),
		'default-setting'	=> array(
			'value'		=> 'default-setting',
			'label'		=> __( 'Default Setting', 't_em' ),
			'callback'	=> ( apply_filters( 't_em_admin_filter_debug_options_default_setting', true ) ) ? t_em_debug_default_setting_callback() : null,
		),
		'system-info'	=> array(
			'value'		=> 'system-info',
			'label'		=> __( 'System Information', 't_em' ),
			'callback'	=> ( apply_filters( 't_em_admin_filter_debug_options_system_info', true ) ) ? t_em_debug_system_info_callback() : null,
		),
	);

	/**
	 * Filter the Debug Options Set
	 *
	 * @param array An array of new options in the Debug Options Set.
	 * 				Keyed by a string id. The ids point to arrays containing 'value', 'label', and 'callback' keys.
	 * @since Twenty'em 1.2
	 */
	return apply_filters( 't_em_admin_filter_debug_options', $debug_options );
}

/**
 * Theme data
 */
function t_em_debug_theme_data_callback(){
	global $t_em_theme_data;
	$theme_data = '<ul>' .
						'<li>' . sprintf( __( '<strong>Framework Name</strong>: <code>%s</code>', 't_em' ), T_EM_FRAMEWORK_NAME ) . '</li>' .
						'<li>' . sprintf( __( '<strong>Framework Version</strong>: <code>%s</code>', 't_em' ), T_EM_FRAMEWORK_VERSION ) . '</li>' .
						'<li>' . sprintf( __( '<strong>Status</strong>: <code>%s</code>', 't_em' ), T_EM_FRAMEWORK_VERSION_STATUS ) . '</li>' .
						'<li>' . sprintf( __( '<strong>Data Base Version</strong>: <code>%s</code>', 't_em' ), T_EM_DB_VERSION ) . '</li>' .
						'<li>' . sprintf( __( '<strong>Current Theme</strong>: <code>%s</code>', 't_em' ), $t_em_theme_data['Name'] ) . '</li>' .
						'<li>' . sprintf( __( '<strong>Theme Version</strong>: <code>%s</code>', 't_em' ), $t_em_theme_data['Version'] ) . '</li>' .
					'</ul>';
	return $theme_data;
}
function t_em_debug_theme_setting_callback(){
	global $t_em;
	$theme_data = '<div class="sub-extend option-group">';
	$theme_data .= '<header>'. sprintf( __( 'Current Option: <code>%s</code>', 't_em' ), 't_em_theme_options' ) .'</header>';
	$theme_data .= '<p class="alert alert-info">'. __( 'You can access these values through the <code>$t_em</code> global variable', 't_em' ) .'</p>';
	$theme_data .= '<pre>'. print_r( $t_em, true ) .'</pre>';
	$theme_data .= '</div>';
	return $theme_data;
}

function t_em_debug_default_setting_callback(){
	global $t_em;
	$theme_data = '<div class="sub-extend option-group">';
	$theme_data .= '<header>'. sprintf( __( 'Current Function: <code>%s</code>', 't_em' ), 't_em_default_theme_options()' ) .'</header>';
	$theme_data .= '<p class="alert alert-info">'. __( 'This function return the defaults values of your theme', 't_em' ) .'</p>';
	$theme_data .= '<pre>'. print_r( t_em_default_theme_options(), true ) .'</pre>';
	$theme_data .= '</div>';
	return $theme_data;
}
function t_em_debug_system_info_callback(){
	global $t_em_theme_data, $wpdb;

	// Site Info
	$info = '<strong>'. __( 'Site Info', 't_em' ) .'</strong>';
	$info .= '<dl class="dl-horizontal">';
	$info .=	'<dt>'. __( 'Site URL:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. site_url() .'</dd>';
	$info .=	'<dt>'. __( 'Home URL:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. home_url() .'</dd>';
	$info .=	'<dt>'. __( 'Multisite:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. ( is_multisite() ? __( 'Yes', 't_em' ) : __( 'No', 't_em' ) ) .'</dd>';
	$info .= '</dl>';

	//  Hosting Provider
	$info .= '<strong>'. __( 'Hosting Provider', 't_em' ) .'</strong>';
	$info .= '<dl class="dl-horizontal">';
	$info .=	'<dt>'. __( 'Domain:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. $_SERVER['SERVER_NAME'] .'</dd>';
	$info .=	'<dt>'. __( 'IP:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. $_SERVER['SERVER_ADDR'] .'</dd>';
	$info .= '</dl>';

	// Browser
	$info .= '<strong>'. __( 'Browser', 't_em' ) .'</strong>';
	$info .= '<dl class="dl-horizontal">';
	$info .=	'<dt>'. __( 'User Agent:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. $_SERVER['HTTP_USER_AGENT'] .'</dd>';
	$info .= '</dl>';

	// WordPress COnfiguration
	$locale = get_locale();
	$parent_theme = $t_em_theme_data['Template'];
	if ( ! empty( $parent_theme ) ) :
		$parent_theme_data	= wp_get_theme( $parent_theme );
		$parent_theme 		= $parent_theme_data->Name . ' ' . $parent_theme_data->Version;
	else :
		$parent_theme 		= __( 'N/A', 't_em' );
	endif;

	$info .= '<strong>'. __( 'WordPress Configuration', 't_em' ) .'</strong>';
	$info .= '<dl class="dl-horizontal">';
	$info .=	'<dt>'. __( 'Version:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. get_bloginfo( 'version' ) .'</dd>';
	$info .=	'<dt>'. __( 'Language:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. ( ! empty( $locale ) ? $locale : __( 'en_US', 't_em' ) ) .'</dd>';
	$info .=	'<dt>'. __( 'Permalink Structure:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. ( get_option( 'permalink_structure' ) ? get_option( 'permalink_structure' ) : __( 'Default', 't_em' ) ) .'</dd>';
	$info .=	'<dt>'. __( 'Active Theme:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. $t_em_theme_data['Name'] .' '. $t_em_theme_data['Version'] .'</dd>';
	$info .=	'<dt>'. __( 'Parent Theme:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. $parent_theme .'</dd>';
	$info .=	'<dt>'. __( 'Show On Front:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. get_option( 'show_on_front', true ) .'</dd>';
	if ( get_option( 'show_on_front' ) == 'page' ) :
		$front_page_id = get_option( 'page_on_front' );
		$blog_page_id = get_option( 'page_for_posts' );
	$info .=	'<dt>'. __( 'Page On Front:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. ( $front_page_id != 0 ? sprintf( __( 'Title: %s - ID: %s', 't_em' ), get_the_title( $front_page_id ), $front_page_id ) : __( 'N/A', 't_em' ) ) .'</dd>';
	$info .=	'<dt>'. __( 'Page For Posts:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. ( $blog_page_id != 0 ? sprintf( __( 'Title: %s - ID: %s', 't_em' ), get_the_title( $blog_page_id ), $blog_page_id ) : __( 'N/A', 't_em' ) ) .'</dd>';
	endif;
	$info .=	'<dt>'. __( 'ABSPATH:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. ABSPATH .'</dd>';
	$info .=	'<dt>'. __( 'Table Prefix:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. sprintf( __( '"%s". Length: %s. Status: %s', 't_em' ), $wpdb->prefix, strlen( $wpdb->prefix ), ( strlen( $wpdb->prefix ) > 16 ? __( 'ERROR: Too long', 't_em' ) : __( 'Acceptable', 't_em' ) ) ) .'</dd>';
	$info .=	'<dt>'. __( 'WP_DEBUG:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. ( defined( 'WP_DEBUG' ) ? WP_DEBUG ? __( 'Enabled', 't_em' ) : __( 'Disabled', 't_em' ) : __( 'N/A', 't_em' ) ) .'</dd>';
	$info .=	'<dt>'. __( 'Memory Limit:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. WP_MEMORY_LIMIT .'</dd>';
	$info .=	'<dt>'. __( 'Registered Post Stati:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. implode( ', ', get_post_stati() ) .'</dd>';
	$info .= '</dl>';

	// Active Plugins
	$updates = get_plugin_updates();
	$plugins = get_plugins();
	$active_plugins = get_option( 'active_plugins', array() );

	$info .= '<strong>'. __( 'Active Plugins', 't_em' ) .'</strong>';
	$info .= '<dl class="dl-horizontal">';
	foreach ( $plugins as $plugins_path => $plugin ) :
		if ( ! in_array( $plugins_path, $active_plugins ) )
			continue;
			$update = ( array_key_exists( $plugins_path, $updates ) ) ? sprintf( __( 'Update Available - %s', 't_em' ), $updates[$plugins_path]->update->new_version ) : null;
		$info .= 	'<dt>'. $plugin['Name'] .'</dt>';
		$info .= 	'<dd>'. $plugin['Version'] .' '. $update .'</dd>';
	endforeach;
	$info .= '</dl>';

	// Inactive Plugins
	$info .= '<strong>'. __( 'Inactive Plugins', 't_em' ) .'</strong>';
	$info .= '<dl class="dl-horizontal">';
	foreach ( $plugins as $plugins_path => $plugin ) :
		if ( in_array( $plugins_path, $active_plugins ) )
			continue;
			$update = ( array_key_exists( $plugins_path, $updates ) ) ? sprintf( __( 'Update Available - %s', 't_em' ), $updates[$plugins_path]->update->new_version ) : null;
		$info .= 	'<dt>'. $plugin['Name'] .'</dt>';
		$info .= 	'<dd>'. $plugin['Version'] .' '. $update .'</dd>';
	endforeach;
	$info .= '</dl>';

	// Multisite Plugins
	if ( is_multisite() ) :
		$plugins = wp_get_active_network_plugins();
		$active_plugins = get_site_option( 'active_sitewide_plugins', array() );

		$info .= '<stromg>'. __( 'Network Active Plugins', 't_em' ) .'</strong>';
		$info .= '<dl class="dl-horizontal">';
		foreach ( $plugins as $plugin_path ) :
			$plugin_base = plugin_basename( $plugin_path );
			if( ! array_key_exists( $plugin_base, $active_plugins ) )
				continue;
			$update	= ( array_key_exists( $plugin_path, $updates ) ) ? sprintf( __( 'Update Available - %s', 't_em' ), $updates[$plugin_path]->update->new_version ) : null;
			$plugin = get_plugin_data( $plugin_path );
			$info .= 	'<dt>'. $plugin['Name'] .'</dt>';
			$info .= 	'<dd>'. $plugin['Version'] .' '. $update .'</dd>';
		endforeach;
		$info .= '</dl>';
	endif;

	// Webserver Configuration
	$info .= '<strong>'. __( 'Webserver Configuration', 't_em' ) .'</strong>';
	$info .= '<dl class="dl-horizontal">';
	$info .=	'<dt>'. __( 'PHP Version:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. PHP_VERSION .'</dd>';
	$info .=	'<dt>'. __( 'MySQL Version:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. $wpdb->db_version() .'</dd>';
	$info .=	'<dt>'. __( 'Webserver:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. $_SERVER['SERVER_SOFTWARE'] .'</dd>';
	$info .= '</dl>';

	// PHP Configuration
	$info .= '<strong>'. __( 'PHP Configuration', 't_em' ) .'</strong>';
	$info .= '<dl class="dl-horizontal">';
	$info .=	'<dt>'. __( 'Memory Limit:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. ini_get( 'memory_limit' ) .'</dd>';

	$info .=	'<dt>'. __( 'Upload Max Size:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. ini_get( 'upload_max_filesize' ) .'</dd>';

	$info .=	'<dt>'. __( 'Post Max Filesize:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. ini_get( 'post_max_size' ) .'</dd>';

	$info .=	'<dt>'. __( 'Time Limit:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. ini_get( 'max_execution_time' ) .'</dd>';

	$info .=	'<dt>'. __( 'Max Input Vars:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. ini_get( 'max_input_vars' ) .'</dd>';

	$info .=	'<dt>'. __( 'Display Errors:', 't_em' ) .'</dt>';
	$info .=	'<dd>'. ( ini_get( 'display_errors' ) ? sprintf( __( 'On: %s', 't_em' ), ini_get( 'display_errors' ) ) : __( 'N/A', 't_em' ) ) .'</dd>';
	$info .= '</dl>';
	return $info;
}

/**
 * The DEBUG
 */
function t_em_settings_field_debug_set(){
	global $t_em;
?>
	<div id="debug-options" class="tabs">
	<ul>
<?php
	foreach ( t_em_debug_options() as $header ) :
		if ( $header['callback'] ) :
?>
		<li>
			<a href="#<?php echo $header['value'] ?>" class="tab-heading">
				<?php echo $header['label']; ?>
			</a>
		</li>
<?php
		endif;
	endforeach;
?>
	</ul>
<?php

	/* If our 'callback' key brings something, then we display our callback function.
	 * Header Image or Slider, that's the question.
	 */
	foreach ( t_em_debug_options() as $sub_header ) :
		if ( $sub_header['callback'] ) :
?>
		<div id="<?php echo $sub_header['value']; ?>" class="sub-layout header-extend">
			<?php // do_action( "t_em_admin_action_header_option_{$sub_header['value']}_before" ); ?>
			<?php echo $sub_header['callback']; ?>
			<?php // do_action( "t_em_admin_action_header_option_{$sub_header['value']}_after" ); ?>
		</div>
<?php
		endif;
	endforeach;
?>
	</div>
<?php
}

function _t_em_debug_info(){
	global $t_em;
?>
	<div class="sub-extend option-group">
		<header><?php printf( __( 'Current Option: <code>%s</code>', 't_em' ), 't_em_theme_options' ) ?></header>
		<p class="alert alert-info"><?php _e( 'You can access these values through the <code>$t_em</code> global variable', 't_em' ) ?></p>
		<pre><?php print_r( get_option( 't_em_theme_options' ) ) ?></pre>
	</div>
<?php
}
?>
